import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

ext {
    reforce_output_path = "../app/build/outputs/apk/release"
}

class ApkFile {
    String channel
    File file
}

task reinforceTest{
    group "jiaGuApk"
    logger.error("${new File("app/build/outputs").directory}")
}

/**
 * 构建发布到生产环境的所有渠道apk
 */
task reinforceRelease {

    group "jiaGuApk"
    dependsOn("assembleRelease")

    doLast {
        List<ApkFile> apkFiles = findApkFiles("release")
        if (apkFiles.size() == 0) {
            throw new RuntimeException("no apk files has found!")
        }
        File outputDir = new File("../${reforce_output_path}")
        if (outputDir.exists()) {
            if (!outputDir.delete()) {
                throw new RuntimeException("delete ${outputDir.path} failure!")
            }
        }
        if (!outputDir.mkdirs()) {
            throw new RuntimeException("make outputDir failure!")
        }
        System.out.println(" ")
        System.out.println("reinforce gradle --> start excute reinforce code .......")
        for (int i = 0; i < apkFiles.size(); i++) {
            ApkFile apkFile = apkFiles.get(i)
            def cmdLogin = "reinforce/java/bin/java -jar reinforce/jiagu.jar -login dingchao823@163.com 332007906DC"
            execute360JiaGuCmd(cmdLogin)
            def cmdSign = "reinforce/java/bin/java -jar reinforce/jiagu.jar -importsign keystore/testdemo.keystore 332007906dc testdemo 332007906dc"
            execute360JiaGuCmd(cmdSign)
            def showSign = "reinforce/java/bin/java -jar reinforce/jiagu.jar -showsign"
            execute360JiaGuCmd(showSign)
            def channelSign = "reinforce/java/bin/java -jar reinforce/jiagu.jar -importmulpkg reinforce/channel/channel.txt"
            execute360JiaGuCmd(channelSign)
            def cmdJiaGu = "reinforce/java/bin/java -jar reinforce/jiagu.jar -jiagu app/build/outputs/apk/release/app-release.apk ${reforce_output_path} -autosign -automulpkg"
            execute360JiaGuCmd(cmdJiaGu)
        }
        System.out.println("reinforce gradle --> end excute reinforce code .......")
        System.out.println(" ")
        File apkDir = new File("../app/build/outputs/apk/release/")
        filterApk(apkDir)
        renameApk(apkDir)
    }

    tasks.whenTaskAdded { theTask ->
        if (theTask.name == "assembleRelease") {
            theTask.dependsOn "cleanOutputsDir"
        }
    }

    task cleanOutputsDir {
        def outputsPath = getBuildDir().getAbsolutePath() + File.separator + "outputs" + File.separator
        new File(outputsPath).deleteDir()
    }

}

/**
 * 查找所有apk
 * @param buildType release 或者 debug
 * @return ArrayList <ApkFile>
 */
def findApkFiles(String buildType) {
    System.out.println(" ")
    System.out.println("reinforce gradle --> find apk files starting ..........")
    File apkDir = new File("app/build/outputs/apk/" + buildType + "/")
    System.out.println("reinforce gradle --> into ${apkDir}")
    File[] channelDirs = apkDir.listFiles()
    if (channelDirs == null || channelDirs.size() == 0){
        throw new RuntimeException("find apk failed !!!")
    }
    List<ApkFile> apkFiles = new ArrayList<>()
    for (int i = 0; i < channelDirs.length; i++) {
        File channelDir = channelDirs[i]
        ApkFile apkFile = new ApkFile()
        if (channelDir.isDirectory()){
            apkFile.channel = channelDir.name
            def channelFiles = channelDir.listFiles()
            if(channelFiles != null && channelFiles.size() > 0){
                channelFiles.each { channelFile ->
                    if (channelFile.name.endsWith(".apk")){
                        apkFile.file = channelFile
                        apkFiles.add(apkFile)
                        System.out.println("reinforce gradle --> find apk ${channelFile.name}")
                    }
                }
            }
        }else {
            if (channelDir.name.endsWith(".apk")) {
                apkFile.file = channelDir
                apkFiles.add(apkFile)
                System.out.println("reinforce gradle --> find apk ${channelDir.name}")
            }
        }
    }
    return apkFiles
}

/**
 * 删除一些临时文件
 * @param outputDir apk保存目录
 */
def filterApk(File outputDir) {
    System.out.println(" ")
    System.out.println("reinforce gradle --> filter apk start ..........")
    System.out.println("reinforce gradle --> switch to ${outputDir}")
    println(outputDir)
    File[] files = outputDir.listFiles()
    for (int i = 0; i < files.length; i++) {
        File file = files[i]
        String fileName = file.getName()
        if (fileName.endsWith("jiagu_sign.apk") || fileName.endsWith("temp.apk") || !fileName.endsWith("_sign.apk")) {
            file.delete()
            System.out.println("reinforce gradle --> delete ${fileName} ")
        }
    }
    System.out.println("reinforce gradle --> filter apk end ..........")
    System.out.println(" ")
}

/**
 * 修改所有apk文件名
 * @param outputDir apk保存目录
 */
def renameApk(File outputDir) {
    System.out.println(" ")
    System.out.println("reinforce gradle --> rename apk start ..........")
    File[] files = outputDir.listFiles()
    for (int i = 0; i < files.length; i++) {
        File file = files[i]
        String fileName = file.getName()
        String[] suffixArr = fileName.split("_")
        String rename = suffixArr[0] + "_" + suffixArr[4] + ".apk"
        file.renameTo(file.getParent() + "/" + rename)
        System.out.println("reinforce gradle --> rename apk [${fileName}] to [${rename}]..........")
    }
    System.out.println("reinforce gradle --> rename apk end ..........")
    System.out.println(" ")
}


def execute360JiaGuCmd(cmd) {
    // 在 TestDemo 下执行执行
    def p = cmd.execute(null, new File("reinforce").parentFile)
    System.out.println("reinforce gradle --> excute cmd [" + cmd + "]")
    System.out.println("reinforce gradle --> ${p.text}")
    p.waitFor()  // 用以等待外部进程调用结束
    System.out.println("reinforce gradle --> excute end with code " + p.exitValue())
    System.out.println(" ")
}